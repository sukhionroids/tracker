@page "/profile"
@using WebApp.Models
@using WebApp.Services
@using Microsoft.AspNetCore.Authorization
@inject GoalsService GoalsService
@inject UserService UserService
@inject IConfiguration Configuration
@attribute [Authorize]

<PageTitle>Profile - LifeTrack</PageTitle>

<div class="dashboard-header">
    <h2><i class="bi bi-person-circle"></i> My Profile</h2>
</div>

<div class="container page-padding">
    <div class="card mb-4">
        <div class="card-body text-center">
            <div class="avatar mb-3">
                <i class="bi bi-person-circle" style="font-size: 4rem; color: #58CC02;"></i>
            </div>
            <h3>@currentUser.Username</h3>
            @if (!string.IsNullOrEmpty(currentUser.Email))
            {
                <p class="text-muted">@currentUser.Email</p>
            }
            <div class="level-badge">
                Level @currentUser.Level
            </div>
            <div class="mt-3 mb-3">
                <div class="progress-text d-flex justify-content-between">
                    <span>@(currentUser.TotalPoints % 100) / 100 XP</span>
                    <span>Next Level: @(currentUser.Level + 1)</span>
                </div>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @((currentUser.TotalPoints % 100))%;" 
                         aria-valuenow="@(currentUser.TotalPoints % 100)" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Stats & Achievements</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6 mb-3">
                    <div class="stat-box">
                        <div class="stat-icon">
                            <i class="bi bi-trophy-fill"></i>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value">@currentUser.TotalPoints</div>
                            <div class="stat-label">Total Points</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 mb-3">
                    <div class="stat-box">
                        <div class="stat-icon">
                            <i class="bi bi-fire"></i>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value">@currentUser.ConsistencyStreak</div>
                            <div class="stat-label">Day Streak</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 mb-3">
                    <div class="stat-box">
                        <div class="stat-icon">
                            <i class="bi bi-check2-circle"></i>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value">@completedGoalsCount</div>
                            <div class="stat-label">Goals Completed</div>
                        </div>
                    </div>
                </div>
                <div class="col-6 mb-3">
                    <div class="stat-box">
                        <div class="stat-icon">
                            <i class="bi bi-star-fill"></i>
                        </div>
                        <div class="stat-info">
                            <div class="stat-value">@currentUser.BalanceBonus</div>
                            <div class="stat-label">Balance Bonuses</div>
                        </div>
                    </div>
                </div>
            </div>

            <h5 class="mt-4 mb-3">Category Completion</h5>
            <div class="category-stats">
                @foreach (var category in categories)
                {
                    <div class="d-flex align-items-center mb-3">
                        <div class="category-dot" style="background-color: @category.Color">
                            <i class="bi @category.Icon"></i>
                        </div>
                        <div class="ms-3">
                            <strong>@category.Name</strong>
                            <div class="small">
                                @GetCompletedGoalsInCategory(category) completed goals
                                @if (category.CompletionStreak > 0)
                                {
                                    <span class="ms-2 streak-pill">
                                        <i class="bi bi-fire"></i> @category.CompletionStreak
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">User Settings</h5>
        </div>
        <div class="card-body">
            <div class="form-group mb-3">
                <label for="username">Username</label>
                <input type="text" class="form-control" id="username" @bind="editUsername" />
            </div>

            <h6 class="mt-4 mb-2">Daily Reminder Time</h6>
            <div class="mb-4">
                <select class="form-control" id="reminderTime" @bind="reminderTime">
                    <option value="morning">Morning (8:00 AM)</option>
                    <option value="afternoon">Afternoon (12:00 PM)</option>
                    <option value="evening">Evening (6:00 PM)</option>
                    <option value="night">Night (9:00 PM)</option>
                </select>
            </div>

            <button type="button" class="btn btn-primary w-100" @onclick="SaveSettingsAsync">
                Save Settings
            </button>
            
            @if (settingsSaved)
            {
                <div class="alert alert-success mt-3" role="alert">
                    Settings saved successfully!
                </div>
            }
        </div>
    </div>
    
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Azure Storage Settings</h5>
            <button class="btn btn-sm btn-outline-primary" @onclick="() => showAzureSettings = !showAzureSettings">
                @(showAzureSettings ? "Hide" : "Show")
            </button>
        </div>
        @if (showAzureSettings)
        {
            <div class="card-body">
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    To persist your data in Azure, create an Azure Storage account and provide the connection string below.
                </div>
                
                <div class="form-group mb-3">
                    <label for="connectionString">Azure Storage Connection String</label>
                    <input type="password" class="form-control" id="connectionString" @bind="azureConnectionString" />
                    <small class="form-text text-muted">Find this in your Azure Storage account's "Access keys" section.</small>
                </div>

                <div class="form-group mb-3">
                    <label for="containerName">Container Name</label>
                    <input type="text" class="form-control" id="containerName" @bind="azureContainerName" />
                    <small class="form-text text-muted">The container where your goal data will be stored.</small>
                </div>

                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary flex-grow-1" @onclick="SaveAzureSettingsAsync">
                        Save Azure Settings
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="TestConnectionAsync">
                        Test Connection
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(azureStatusMessage))
                {
                    <div class="alert @(isAzureConnected ? "alert-success" : "alert-danger") mt-3" role="alert">
                        @azureStatusMessage
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .avatar {
        margin: 0 auto;
        display: inline-block;
    }

    .level-badge {
        display: inline-block;
        background-color: #58CC02;
        color: white;
        padding: 6px 20px;
        border-radius: 20px;
        font-weight: bold;
    }

    .stat-box {
        display: flex;
        align-items: center;
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 15px;
        height: 100%;
    }

    .stat-icon {
        background-color: #e8f5e2;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #58CC02;
        font-size: 1.2rem;
        margin-right: 15px;
    }

    .stat-value {
        font-weight: bold;
        font-size: 1.2rem;
    }

    .stat-label {
        color: #666;
        font-size: 0.85rem;
    }

    .category-dot {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .streak-pill {
        background-color: #FFF0CD;
        color: #FF9500;
        border-radius: 10px;
        padding: 2px 6px;
        font-size: 0.75rem;
    }
</style>

@code {
    private List<Category> categories = new();
    private User currentUser = new();
    private int completedGoalsCount = 0;
    private string editUsername = "";
    private string reminderTime = "evening";
    private bool settingsSaved = false;
    private bool showAzureSettings = false;
    
    // Azure Storage settings
    private string azureConnectionString = "";
    private string azureContainerName = "lifetrack-data";
    private string azureStatusMessage = "";
    private bool isAzureConnected = false;

    protected override async Task OnInitializedAsync()
    {
        categories = GoalsService.GetCategories();
        
        // Get user details from the UserService which integrates Azure AD information
        currentUser = await UserService.GetCurrentUserAsync();
        editUsername = currentUser.Username;
        
        // Calculate statistics
        completedGoalsCount = categories.Sum(c => c.Goals.Count(g => g.IsCompleted));
        
        // Load Azure settings from configuration
        azureConnectionString = Configuration["AzureStorage:ConnectionString"] ?? "";
        azureContainerName = Configuration["AzureStorage:ContainerName"] ?? "lifetrack-data";
    }

    private int GetCompletedGoalsInCategory(Category category)
    {
        return category.Goals.Count(g => g.IsCompleted);
    }

    private async Task SaveSettingsAsync()
    {
        // In a real app, we would update the user settings via a service
        currentUser.Username = editUsername;
        
        // Display success message
        settingsSaved = true;
        await Task.Delay(3000); // Hide message after 3 seconds
        settingsSaved = false;
    }
    
    private async Task SaveAzureSettingsAsync()
    {
        // In a real app, we would save these settings to a configuration file
        // or to a secure storage. Since this is a browser app, we'll just display
        // a message for now.
        
        azureStatusMessage = "Azure Storage settings saved. Please use these settings when deploying the app to Azure.";
        isAzureConnected = true;
        
        await Task.Delay(3000);
        azureStatusMessage = "";
    }
    
    private async Task TestConnectionAsync()
    {
        if (string.IsNullOrWhiteSpace(azureConnectionString))
        {
            azureStatusMessage = "Please enter a connection string.";
            isAzureConnected = false;
            return;
        }
        
        // In a real app, we would test the connection to Azure Storage
        // For this demo, we'll simulate a successful connection
        azureStatusMessage = "Connection successful! Your data will be stored in Azure.";
        isAzureConnected = true;
        
        await Task.Delay(5000);
        azureStatusMessage = "";
    }
}